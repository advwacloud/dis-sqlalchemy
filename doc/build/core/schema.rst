.. _schema_toplevel:

==========================
Schema Definition Language
==========================

.. currentmodule:: dis_sqlalchemy.schema

This section references dis_sqlalchemy **schema metadata**, a comprehensive system of describing and inspecting
database schemas.

The core of dis_sqlalchemy's query and object mapping operations are supported by
*database metadata*, which is comprised of Python objects that describe tables
and other schema-level objects. These objects are at the core of three major
types of operations - issuing CREATE and DROP statements (known as *DDL*),
constructing SQL queries, and expressing information about structures that
already exist within the database.

Database metadata can be expressed by explicitly naming the various components
and their properties, using constructs such as
:class:`~dis_sqlalchemy.schema.Table`, :class:`~dis_sqlalchemy.schema.Column`,
:class:`~dis_sqlalchemy.schema.ForeignKey` and
:class:`~dis_sqlalchemy.schema.Sequence`, all of which are imported from the
``dis_sqlalchemy.schema`` package. It can also be generated by dis_sqlalchemy using a
process called *reflection*, which means you start with a single object such
as :class:`~dis_sqlalchemy.schema.Table`, assign it a name, and then instruct
dis_sqlalchemy to load all the additional information related to that name from a
particular engine source.

A key feature of dis_sqlalchemy's database metadata constructs is that they are
designed to be used in a *declarative* style which closely resembles that of
real DDL. They are therefore most intuitive to those who have some background
in creating real schema generation scripts.

.. toctree::
    :maxdepth: 3

    metadata
    reflection
    defaults
    constraints
    ddl

